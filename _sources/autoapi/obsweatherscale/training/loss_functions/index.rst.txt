obsweatherscale.training.loss_functions
=======================================

.. py:module:: obsweatherscale.training.loss_functions


Functions
---------

.. autoapisummary::

   obsweatherscale.training.loss_functions.crps_normal
   obsweatherscale.training.loss_functions.crps_normal_loss_fct
   obsweatherscale.training.loss_functions.mll_loss_fct


Module Contents
---------------

.. py:function:: crps_normal(obs: torch.Tensor, mu: torch.Tensor, sigma: torch.Tensor) -> torch.Tensor

   Wrapper to compute the Continuous Ranked Probability Score (CRPS)
   for a Normal distribution.

   :Parameters: * **obs** (*torch.Tensor*) -- Observed values.
                * **mu** (*torch.Tensor*) -- Mean of the Normal distribution.
                * **sigma** (*torch.Tensor*) -- Standard deviation of the Normal distribution.

   :returns: The CRPS for the normal distribution, averaged across all
             observations.
   :rtype: torch.Tensor

   .. rubric:: Notes

   The CRPS is a proper scoring rule that measures the compatibility
   between a probability distribution and an observation. It's defined
   as the integrated squared difference between the CDF of the forecast
   distribution and the empirical CDF of the observation.

   For a normal distribution, the CRPS has the closed form:
   CRPS(N(μ, σ), y) =
       σ * [y_norm * (2*Φ(y_norm) - 1) + 2*φ(y_norm) - 1/√π]
   where y_norm = (y - μ)/σ, Φ is the CDF and φ is the PDF of the
   standard normal.


.. py:function:: crps_normal_loss_fct(likelihood: gpytorch.likelihoods._GaussianLikelihoodBase | None = None) -> Callable[[gpytorch.distributions.MultivariateNormal, torch.Tensor], torch.Tensor]

   Wrapper to create a CRPS loss function for normal distributions
   that handles missing values and optionally transforms the
   distribution.

   :Parameters: **likelihood** (*_GaussianLikelihoodBase or None, optional*) -- A Gaussian likelihood transformation to apply to the
                distribution. If provided, transforms the distribution before
                computing the CRPS.

   :returns: A function that computes the CRPS loss between a multivariate
             Normal distribution and observed values.
   :rtype: Callable

   .. rubric:: Notes

   The returned loss function handles missing values by masking them
   and treats them specially in the computation. For missing values,
   the parameters are set to produce a neutral contribution to the loss.


.. py:function:: mll_loss_fct(mll: gpytorch.ExactMarginalLogLikelihood) -> Callable[[gpytorch.distributions.MultivariateNormal, torch.Tensor], torch.Tensor]

   Wrapper to create a negative log-likelihood loss function
   of a multivariate normal distribution, optionally transformed by a
   likelihood function.

   :Parameters: **mll** (*ExactMarginalLogLikelihood*) -- The marginal log likelihood object that computes the log
                likelihood of the observations given the distribution.

   :returns: A function that computes the negative log likelihood loss
             between a multivariate normal distribution and observed values.
   :rtype: Callable

   .. rubric:: Notes

   The returned loss function negates and averages the log likelihood
   to create a loss suitable for minimization in optimization problems.

   :raises TypeError: If the mll doesn't return a torch.Tensor.


