obsweatherscale.inference
=========================

.. py:module:: obsweatherscale.inference


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/obsweatherscale/inference/predict_distribution/index
   /autoapi/obsweatherscale/inference/sample/index


Attributes
----------

.. autoapisummary::

   obsweatherscale.inference.Distribution


Classes
-------

.. autoapisummary::

   obsweatherscale.inference.TransformedGaussianLikelihood


Functions
---------

.. autoapisummary::

   obsweatherscale.inference.predict_posterior
   obsweatherscale.inference.predict_prior
   obsweatherscale.inference.sample


Package Contents
----------------

.. py:class:: TransformedGaussianLikelihood(noise_covar: obsweatherscale.likelihoods.noise_models.TransformedNoise, **kwargs: Any)

   Bases: :py:obj:`gpytorch.likelihoods._GaussianLikelihoodBase`


   A Gaussian likelihood with a transformed noise model.

   This likelihood allows custom noise transformations by leveraging
   a `TransformedNoise` object. It supports missing observation
   handling policies, including masking and filling, and is designed
   for compatibility with GPyTorch models using `MultivariateNormal`
   outputs.

   .. method:: _shaped_noise_covar(base_shape, \*params, y=None, \*\*kwargs)

      Returns a noise covariance object of the correct shape,
      optionally based on `y`.


   .. method:: expected_log_prob(target, input, \*params, \*\*kwargs)

      Computes the expected log probability of the target under the
      input distribution, optionally handling NaNs according to the
      active policy.


   .. method:: forward(function_samples, \*params, \*\*kwargs)

      Returns a Normal distribution by applying transformed noise to
      function samples.


   .. method:: marginal(function_dist, \*params, \*\*kwargs)

      Returns the marginal distribution including the transformed
      noise covariance.



   .. py:method:: expected_log_prob(target: torch.Tensor, input: gpytorch.distributions.MultivariateNormal, *params: Any, **kwargs: Any) -> torch.Tensor

      Expected log probability of target given input distribution.

      Computes the expected log probability of the `target` given the
      `input` distribution, accounting for noise and handling missing
      values according to the configured NaN policy.

      :Parameters: * **target** (*torch.Tensor*) -- The target tensor to compute the log probability for.
                   * **input** (*MultivariateNormal*) -- The input distribution, typically a MultivariateNormal, from
                     which the mean and variance will be used to compute the log
                     probability.
                   * **\*params** (*tuple*) -- Additional parameters passed to the likelihood.
                   * **\*\*kwargs** (*Any*) -- Additional keyword arguments passed to the likelihood.

      :returns: The computed log probability for the given target and input
                distribution.
      :rtype: torch.Tensor



   .. py:method:: forward(function_samples: torch.Tensor, *params: Any, **kwargs: Any) -> torch.distributions.Normal

      Applies noise to given function samples.

      Returns a Normal distribution by applying the transformed noise
      to the given function samples.

      :Parameters: * **function_samples** (*torch.Tensor*) -- The samples from the function (typically the mean of a
                     MultivariateNormal).
                   * **\*params** (*tuple*) -- Additional parameters passed to the noise covariance
                     function.
                   * **\*\*kwargs** (*Any*) -- Additional keyword arguments passed to the likelihood.

      :returns: The Normal distribution obtained after adding noise to the
                function samples.
      :rtype: torch.distributions.Normal



   .. py:method:: marginal(function_dist: gpytorch.distributions.MultivariateNormal, *params: Any, **kwargs: Any) -> gpytorch.distributions.MultivariateNormal

      Computes the marginal distribution by adding the noise
      covariance to the covariance of the function distribution.

      :Parameters: * **function_dist** (*MultivariateNormal*) -- The MultivariateNormal distribution representing the
                     function's posterior.
                   * **\*params** (*tuple*) -- Additional parameters passed to the noise covariance
                     function.
                   * **\*\*kwargs** (*Any*) -- Additional keyword arguments passed to the likelihood.

      :returns: The marginal distribution, which is the sum of the
                function's covariance and the noise covariance.
      :rtype: MultivariateNormal



.. py:function:: predict_posterior(model: gpytorch.models.ExactGP, likelihood: obsweatherscale.likelihoods.TransformedGaussianLikelihood, context_x: torch.Tensor, context_y: torch.Tensor, target_x: torch.Tensor) -> gpytorch.distributions.MultivariateNormal

.. py:function:: predict_prior(model: gpytorch.models.ExactGP, likelihood: obsweatherscale.likelihoods.TransformedGaussianLikelihood, target_x: torch.Tensor, target_y: torch.Tensor) -> gpytorch.distributions.MultivariateNormal

.. py:data:: Distribution

.. py:function:: sample(distribution: Distribution, n_samples: int) -> torch.Tensor

